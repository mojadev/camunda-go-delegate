// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"encoding/json"
	"fmt"

	"github.com/pkg/errors"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	AdditionalInformation *[]struct {
		AdditionalProperties map[string]interface{} `json:"-"`
	} `json:"additionalInformation,omitempty"`
	Message *string `json:"message,omitempty"`
}

// ProcessContext defines model for ProcessContext.
type ProcessContext struct {

	// Container object for process variables
	Variables *VariableScope `json:"variables,omitempty"`
}

// ProcessExecutionResult defines model for ProcessExecutionResult.
type ProcessExecutionResult struct {

	// Signals and events that should be emitted in the process
	Signals *[]Signal `json:"signals,omitempty"`

	// Container object for process variables
	Variables *VariableScope `json:"variables,omitempty"`
}

// ProcessStepExecutorDetails defines model for ProcessStepExecutorDetails.
type ProcessStepExecutorDetails struct {
	Description *string `json:"description,omitempty"`
	Version     string  `json:"version"`
}

// Signal defines model for Signal.
type Signal struct {
	Key     *string `json:"key,omitempty"`
	Message *string `json:"message,omitempty"`

	// The type of signal that should be send. Errors *should* always be executed last and must only occur once.
	Type string `json:"type"`

	// Container object for process variables
	Variables *VariableScope `json:"variables,omitempty"`
}

// VariableScope defines model for VariableScope.
type VariableScope struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ExecuteProcessStepJSONBody defines parameters for ExecuteProcessStep.
type ExecuteProcessStepJSONBody ProcessContext

// ExecuteProcessStepRequestBody defines body for ExecuteProcessStep for application/json ContentType.
type ExecuteProcessStepJSONRequestBody ExecuteProcessStepJSONBody

// Getter for additional properties for VariableScope. Returns the specified
// element and whether it was found
func (a VariableScope) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for VariableScope
func (a *VariableScope) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for VariableScope to handle AdditionalProperties
func (a *VariableScope) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for VariableScope to handle AdditionalProperties
func (a VariableScope) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}
